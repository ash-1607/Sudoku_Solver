#include <iostream>
#include <bitset>
#include <vector>
#include <array>

using namespace std;

int get_cell(int row, int col)
{
    return 3 * (row / 3) + col / 3;
}

int next_row(int row, int col)
{
    return row + (col + 1) / 9;
}

int next_col(int col)
{
    return (col + 1) % 9;
}

pair<int, int> next_empty_pos(vector<vector<char>> &board, int row, int col)
{
    while (row != 9)
    {
        if (board[row][col] == '.')
            return {row, col};
        row = next_row(row, col);
        col = next_col(col);
    }

    return {9, 0};
}

void printBoard(vector<vector<char>> &board)
{
    for (int i = 0; i < 9; i++)
    {
        if (i == 3 || i == 6)
            cout << "---------------------" << endl;
        for (int j = 0; j < 9; j++)
        {
            if (j == 3 || j == 6)
                cout << "| ";
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

bool solveUtil(vector<vector<char>> &board, array<bitset<9>, 9> &row_contains, array<bitset<9>, 9> &col_contains, array<bitset<9>, 9> &cell_contains, int row, int col) 
{
    auto temp = next_empty_pos(board, row, col);
    row = temp.first;
    col = temp.second;

    // empty position is out of sudoku board bounds, meaning solved
    if (row == 9)
        return true;

    int cell = get_cell(row, col);
    bitset<9> contains = row_contains[row] | col_contains[col] | cell_contains[cell];

    // if all digits are set => no possible solution
    if (contains.all())
        return false;

    // check for digits 1 to 9
    for (int num = 0; num < 9; num++)
    {
        // try adding num if it isn't already set in contains set
        if (!contains[num])
        {
            board[row][col] = char(num + '1');
            row_contains[row].set(num);
            col_contains[col].set(num);
            cell_contains[cell].set(num);

            // if further processing gives result, return
            if (solveUtil(board, row_contains, col_contains, cell_contains, row, col))
                return true;

            // Otherwise, undo and try adding next digit num
            row_contains[row].reset(num);
            col_contains[col].reset(num);
            cell_contains[cell].reset(num);
        }
    }
    // if the program reaches here, means we didn't get a result with any of the digits => no possible solution
    board[row][col] = '.';
    return false;
}

bool solve(vector<vector<char>> &board)
{
    array<bitset<9>, 9> row_contains = {0, 0, 0, 0, 0, 0, 0, 0, 0};
    array<bitset<9>, 9> col_contains = {0, 0, 0, 0, 0, 0, 0, 0, 0};
    array<bitset<9>, 9> cell_contains = {0, 0, 0, 0, 0, 0, 0, 0, 0};

    for (int row = 0; row < 9; row++)
    {
        for (int col = 0; col < 9; col++)
        {
            if (board[row][col] != '.')
            {
                int num = board[row][col] - '1';
                row_contains[row].set(num);
                col_contains[col].set(num);
                int cell = get_cell(row, col);
                cell_contains[cell].set(num);
            }
        }
    }
    return solveUtil(board, row_contains, col_contains, cell_contains, 0, 0);
}

int main()
{
    vector<vector<char>> board = {
        {'.', '.', '.', '6', '.', '.', '4', '.', '.'},
        {'.', '.', '.', '.', '.', '3', '6', '.', '.'},
        {'.', '.', '.', '.', '9', '1', '.', '8', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '5', '.', '1', '8', '.', '.', '.', '3'},
        {'.', '.', '.', '3', '.', '6', '.', '4', '5'},
        {'.', '4', '.', '2', '.', '.', '.', '6', '.'},
        {'9', '.', '3', '.', '.', '.', '.', '.', '.'},
        {'.', '2', '.', '.', '.', '.', '1', '.', '.'}
    };

    vector<vector<char>> expected_board = {
        {'1', '3', '2', '6', '5', '8', '4', '7', '9'},
        {'4', '9', '8', '7', '2', '3', '6', '5', '1'},
        {'5', '7', '6', '4', '9', '1', '3', '8', '2'},
        {'3', '8', '7', '5', '4', '9', '2', '1', '6'},
        {'6', '5', '4', '1', '8', '2', '7', '9', '3'},
        {'2', '1', '9', '3', '7', '6', '8', '4', '5'},
        {'7', '4', '1', '2', '3', '5', '9', '6', '8'},
        {'9', '6', '3', '8', '1', '4', '5', '2', '7'},
        {'8', '2', '5', '9', '6', '7', '1', '3', '4'}
    };

    cout << endl
         << endl
         << "==INITIAL BOARD==" << endl;
    printBoard(board);

    cout << endl
         << endl
         << "==EXPECTED BOARD==" << endl;
    printBoard(expected_board);

    if (solve(board))
        cout << endl
             << endl
             << "SUCCESS!" << endl;
    else{
        cout << "Uh oh no possible solution" << endl;
        return 0;
    }

    cout << endl
         << "==SOLVED==" << endl
         << endl;
    printBoard(board);

    return 0;
}


/*****
GRID 1
unsolved = {
        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
}

solved = {
        {'5', '3', '4', '6', '7', '8', '9', '1', '2'},
        {'6', '7', '2', '1', '9', '5', '3', '4', '8'},
        {'1', '9', '8', '3', '4', '2', '5', '6', '7'},
        {'8', '5', '9', '7', '6', '1', '4', '2', '3'},
        {'4', '2', '6', '8', '5', '3', '7', '9', '1'},
        {'7', '1', '3', '9', '2', '4', '8', '5', '6'},
        {'9', '6', '1', '5', '3', '7', '2', '8', '4'},
        {'2', '8', '7', '4', '1', '9', '6', '3', '5'},
        {'3', '4', '5', '2', '8', '6', '1', '7', '9'}
}


GRID 2
unsolved = {
        {'1', '.', '.', '4', '8', '9', '.', '.', '6'},
        {'7', '3', '.', '.', '.', '.', '.', '4', '.'},
        {'.', '.', '.', '.', '.', '1', '2', '9', '5'},
        {'.', '.', '7', '1', '2', '.', '6', '.', '.'},
        {'5', '.', '.', '7', '.', '3', '.', '.', '8'},
        {'.', '.', '6', '.', '9', '5', '7', '.', '.'},
        {'9', '1', '4', '6', '.', '.', '.', '.', '.'},
        {'.', '2', '.', '.', '.', '.', '.', '3', '7'},
        {'8', '.', '.', '5', '1', '2', '.', '.', '4'}

}

solved = {
        {'1', '5', '2', '4', '8', '9', '3', '7', '6'},
        {'7', '3', '9', '2', '5', '6', '8', '4', '1'},
        {'4', '6', '8', '3', '7', '1', '2', '9', '5'},
        {'3', '8', '7', '1', '2', '4', '6', '5', '9'},
        {'5', '9', '1', '7', '6', '3', '4', '2', '8'},
        {'2', '4', '6', '8', '9', '5', '7', '1', '3'},
        {'9', '1', '4', '6', '3', '7', '5', '8', '2'},
        {'6', '2', '5', '9', '4', '8', '1', '3', '7'},
        {'8', '7', '3', '5', '1', '2', '9', '6', '4'}
}


GRID 3
unsolved = {
        {'.', '.', '.', '2', '6', '.', '7', '.', '1'},
        {'6', '8', '.', '.', '7', '.', '.', '9', '.'},
        {'1', '9', '.', '.', '.', '4', '5', '.', '.'},
        {'8', '2', '.', '1', '.', '.', '.', '4', '.'},
        {'.', '.', '4', '6', '.', '2', '9', '.', '.'},
        {'.', '5', '.', '.', '.', '3', '.', '2', '8'},
        {'.', '.', '9', '3', '.', '.', '.', '7', '4'},
        {'.', '4', '.', '.', '5', '.', '.', '3', '6'},
        {'7', '.', '3', '.', '1', '8', '.', '.', '.'}
}

solved = {
        {'4', '3', '5', '2', '6', '9', '7', '8', '1'},
        {'6', '8', '2', '5', '7', '1', '4', '9', '3'},
        {'1', '9', '7', '8', '3', '4', '5', '6', '2'},
        {'8', '2', '6', '1', '9', '5', '3', '4', '7'},
        {'3', '7', '4', '6', '8', '2', '9', '1', '5'},
        {'9', '5', '1', '7', '4', '3', '6', '2', '8'},
        {'5', '1', '9', '3', '2', '6', '8', '7', '4'},
        {'2', '4', '8', '9', '5', '7', '1', '3', '6'},
        {'7', '6', '3', '4', '1', '8', '2', '5', '9'}
}

GRID 4  //this has multiple solutions
unsolved = {
        {'.', '.', '.', '6', '.', '.', '4', '.', '.'},
        {'.', '.', '.', '.', '.', '3', '6', '.', '.'},
        {'.', '.', '.', '.', '9', '1', '.', '8', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '5', '.', '1', '8', '.', '.', '.', '3'},
        {'.', '.', '.', '3', '.', '6', '.', '4', '5'},
        {'.', '4', '.', '2', '.', '.', '.', '6', '.'},
        {'9', '.', '3', '.', '.', '.', '.', '.', '.'},
        {'.', '2', '.', '.', '.', '.', '1', '.', '.'}
}

solved1 = {
        {'5', '8', '1', '6', '7', '2', '4', '3', '9'},
        {'7', '9', '2', '8', '4', '3', '6', '5', '1'},
        {'3', '6', '4', '5', '9', '1', '7', '8', '2'},
        {'4', '3', '8', '9', '5', '7', '2', '1', '6'},
        {'2', '5', '6', '1', '8', '4', '9', '7', '3'},
        {'1', '7', '9', '3', '2', '6', '8', '4', '5'},
        {'8', '4', '5', '2', '1', '9', '3', '6', '7'},
        {'9', '1', '3', '7', '6', '8', '5', '2', '4'},
        {'6', '2', '7', '4', '3', '5', '1', '9', '8'}
}

solved2 = {
        {'1', '3', '2', '6', '5', '8', '4', '7', '9'},
        {'4', '9', '8', '7', '2', '3', '6', '5', '1'},
        {'5', '7', '6', '4', '9', '1', '3', '8', '2'},
        {'3', '8', '7', '5', '4', '9', '2', '1', '6'},
        {'6', '5', '4', '1', '8', '2', '7', '9', '3'},
        {'2', '1', '9', '3', '7', '6', '8', '4', '5'},
        {'7', '4', '1', '2', '3', '5', '9', '6', '8'},
        {'9', '6', '3', '8', '1', '4', '5', '2', '7'},
        {'8', '2', '5', '9', '6', '7', '1', '3', '4'}
}

*****/